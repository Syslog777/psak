"""
 Copyright (c) 2017, Syslog777
 
 All rights reserved.
 
 Redistribution and use in source and binary forms, with or without modification,
 are permitted provided that the following conditions are met:
 
     * Redistributions of source code must retain the above copyright notice,
       this list of conditions and the following disclaimer.
     * Redistributions in binary form must reproduce the above copyright notice,
       this list of conditions and the following disclaimer in the documentation
       and/or other materials provided with the distribution.
     * Neither the name of Desktop nor the names of its contributors
       may be used to endorse or promote products derived from this software
       without specific prior written permission.
 
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""
import os
import sys


class NInfo:
    def __init__(self, parser):
        parser.add_argument('--inet', action="store",
                            dest="inet", help="Displays ip addresses in range defined by user."
                                              " Range must be either 8, 16 or 24 and is required"
                                              " in number form")
        parser.add_argument('-m', '--mac', action='store_true',
                            dest="mac", help="Generates a list of macs on from the machine")
        parser.add_argument('-i', '--iface', action='store_true',
                            dest="iface", help="Lists all interfaces")
        parser.add_argument('--service', nargs="?", help="Requests the services running on host")
        try:
            self.args = parser.parse_args()
        except BaseException:
            parser.print_help()
            sys.exit(1)

        self.ninfo = self.args.ninfo
        self.mac = self.args.mac
        self.iface = self.args.iface
        self.inet = self.args.inet
        self.service = self.args.service

    def macs(self):
        os.system("ip a | grep link/ether")

    def inets(self):
        os.system("netdiscover -r 0.0.0.0/{}".format(self.inet))

    def ifaces(self):
        os.system("ip a")

    def services(self):
        if len(self.service) >= 7:
            # 0.0.0.0 or localhost, 7 is the minimum length
            print("Scanning host ports for services")
            os.system("rpcinfo -p {}".format(self.service))


    def main(self):
        funcs = list()
        if self.inet:
            funcs.append(self.inets)
        if self.mac:
            funcs.append(self.macs)
        if self.iface:
            funcs.append(self.ifaces)
        if self.service:
            funcs.append(self.services)
        try:
            from exploit_modules.internal_utils.ithread import IThread
            ithread = IThread(funcs)
        except ImportError:
            from psak_src.exploit_modules.internal_utils.ithread import IThread
            ithread = IThread(funcs)
